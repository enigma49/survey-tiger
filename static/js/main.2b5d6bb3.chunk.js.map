{"version":3,"sources":["survey-tiger.PNG","store/surveySlic.js","components/MultiSelect.js","components/SingleSelect.js","components/CreateSurvey.js","components/TakeSurvey.js","components/ConfirmSurvey.js","App.js","reportWebVitals.js","store/responseSlice.js","store/global-store.js","index.js"],"names":["createSurvey","createAsyncThunk","_","thunkAPI","a","newSurveyId","String","getState","surveys","length","surveySlice","createSlice","name","initialState","reducers","addQuestion","state","action","payload","surveyId","type","options","question","q","find","s","questions","console","log","qId","push","markPublished","isPublished","extraReducers","fulfilled","MultiSelect","useState","setOptions","setQuestion","useParams","history","useHistory","dispatch","useDispatch","isNullOrDefined","trim","undefined","x","className","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","placeholder","onChange","e","target","value","map","option","optionIdx","Button","onClick","idx","newOptions","newOptionsIdx","currentNewOptionIdx","addOption","disabled","splice","setOptionInArray","actions","SingleSelect","CreateSurvey","query","useLocation","search","dropdownOpen","setDropdownOpen","dropdownText","setDropdownText","useEffect","Dropdown","isOpen","toggle","prevState","DropdownToggle","caret","DropdownMenu","DropdownItem","TakeSurvey","surveyIds","useSelector","globalStore","filter","styles","margin","marginTop","marginBottom","display","style","ConfirmSurvey","surveyData","Math","random","App","src","logo","alt","path","then","unwrapResult","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","responseSlice","print","rootReducer","combineReducers","reducer","responses","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b5d6bb3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/survey-tiger.599888d9.PNG\";","import { createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\n\r\nexport const createSurvey = createAsyncThunk(\r\n    'surveys/createSurvey', \r\n    async (_,thunkAPI) => {\r\n    const newSurveyId = String(thunkAPI.getState().surveys.length + 1);\r\n    return newSurveyId;\r\n})\r\n\r\n\r\nexport const surveySlice = createSlice({\r\n    name: \"surveys\",\r\n    initialState: [],\r\n    reducers:{\r\n        addQuestion: (state, action) => {\r\n            const {surveyId, type, options, question} = action.payload;\r\n            const q = state.find((s) => String(s.surveyId) === String(surveyId)).questions;\r\n            console.log(q,\"Q\");\r\n            const qId = String(q.length + 1);\r\n            q.push({qId, type, question, options});\r\n            console.log(q);\r\n        },\r\n        markPublished: (state, action) =>{\r\n            const {surveyId} = action.payload;\r\n            state.find((s)=> String(s.surveyId) === String(surveyId)).isPublished = true;\r\n        }       \r\n        },\r\n    extraReducers:{\r\n        [createSurvey.fulfilled]: (state, action) =>{\r\n            state.push({questions:[], surveyId: action.payload, isPublished: false});\r\n        },\r\n    },\r\n})","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { surveySlice } from \"../store/surveySlic\";\r\nimport {\r\n  Button,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  Input,\r\n} from \"reactstrap\";\r\nconst MultiSelect = () => {\r\n  const [options, setOptions] = useState([\"\"]);\r\n  const [question, setQuestion] = useState(\"\");\r\n  const {surveyId} = useParams();\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const addOption = (idx) => {\r\n    if (options.length < 4) {\r\n      const newOptions = [...options, \"\"];\r\n      const newOptionsIdx = idx + 1;\r\n      let currentNewOptionIdx = newOptions.length - 1;\r\n      while (newOptionsIdx !== currentNewOptionIdx) {\r\n        newOptions[currentNewOptionIdx] = newOptions[currentNewOptionIdx - 1];\r\n        currentNewOptionIdx--;\r\n        newOptions[currentNewOptionIdx] = \"\";\r\n      }\r\n      setOptions(newOptions);\r\n    }\r\n  };\r\n  const removeOption = (idx) => {\r\n    console.log(\"remove options\");\r\n    if (options.length > 1) {\r\n      options.splice(idx, 1);\r\n      setOptions([...options]);\r\n    }\r\n  };\r\n  const setOptionInArray = (value, optionIdx) => {\r\n    options[optionIdx] = value;\r\n    setOptions([...options]);\r\n  };\r\n  const isNullOrDefined = () => {\r\n    return (\r\n      question.trim() === \"\" ||\r\n      options.find((x) => x.trim() === \"\") !== undefined\r\n    );\r\n  };\r\n\r\n  const addQuestionClickAction = () => {\r\n    const payload = { options, question, surveyId, type: \"multi\" };\r\n    dispatch(surveySlice.actions.addQuestion(payload));\r\n    history.push(\"/create/\" + surveyId + \"?clear=true\");\r\n  };\r\n  return (\r\n    <div className=\"question-container\">\r\n      <InputGroup>\r\n        <InputGroupAddon addonType=\"prepend\">\r\n          <InputGroupText>?</InputGroupText>\r\n        </InputGroupAddon>\r\n        <Input\r\n          placeholder=\"Your Question\"\r\n          onChange={(e) => {\r\n            setQuestion(e.target.value);\r\n          }}\r\n          value={question}\r\n        />\r\n      </InputGroup>\r\n      <br />\r\n      <h3>Options</h3>\r\n      {options.map((option, optionIdx) => (\r\n        <InputGroup key={`Option${optionIdx + 1}`}>\r\n          <InputGroupAddon className=\"input-grp\" addonType=\"append\">\r\n            <Button\r\n              onClick={() => addOption(optionIdx)}\r\n              disabled={options.length >= 4}\r\n            >\r\n              +\r\n            </Button>\r\n            <Button\r\n              onClick={() => removeOption(optionIdx)}\r\n              disabled={options.length === 1}\r\n            >\r\n              -\r\n            </Button>\r\n          </InputGroupAddon>\r\n          <Input\r\n            placeholder={`Option${optionIdx + 1}`}\r\n            value={option}\r\n            onChange={(e) => setOptionInArray(e.target.value, optionIdx)}\r\n          />\r\n        </InputGroup>\r\n      ))}\r\n      {options.length === 4 ? (\r\n        <div className=\"question-buttons\">\r\n          <Button\r\n            className=\"survey-qts-btn\"\r\n            onClick={addQuestionClickAction}\r\n            disabled={isNullOrDefined()}\r\n          >\r\n            Add Question\r\n          </Button>\r\n          <Button className=\"survey-qts-btn\" disabled={isNullOrDefined()}>\r\n            Publish Question\r\n          </Button>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MultiSelect;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { surveySlice } from \"../store/surveySlic\";\r\nconst SingleSelect = () => {\r\n  const [options, setOptions] = useState([\"\", \"\"]);\r\n  const [question, setQuestion] = useState(\"\");\r\n  const { surveyId } = useParams();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const setOptionInArray = (value, optionIdx) => {\r\n    options[optionIdx] = value;\r\n    setOptions([...options]);\r\n  };\r\n\r\n  const isNullOrDefined = () => {\r\n    return (\r\n      question.trim() === \"\" ||\r\n      options.find((x) => x.trim() === \"\") !== undefined\r\n    );\r\n  };\r\n\r\n  const addQuestionClickAction = () => {\r\n    const payload = { options, question, surveyId, type: \"single\" };\r\n    dispatch(surveySlice.actions.addQuestion(payload));\r\n    history.push('/create/'+surveyId + \"?clear=true\");\r\n  };\r\n\r\n  const publishQuestion = () =>{\r\n    const payload = { options, question, surveyId, type: \"single\" };\r\n    dispatch(surveySlice.actions.addQuestion(payload));\r\n    history.push('/confirm/'+surveyId);\r\n  }\r\n  return (\r\n    <div className=\"question-container\">\r\n      <InputGroup>\r\n        <InputGroupAddon addonType=\"prepend\">\r\n          <InputGroupText>?</InputGroupText>\r\n        </InputGroupAddon>\r\n        <Input\r\n          placeholder=\"Your Question\"\r\n          onChange={(e) => {\r\n            setQuestion(e.target.value);\r\n          }}\r\n          value={question}\r\n        />\r\n      </InputGroup>\r\n      <br />\r\n      <h3>Options</h3>\r\n      <InputGroup>\r\n        <InputGroupAddon className=\"input-grp\" addonType=\"append\">\r\n          <InputGroupText>+</InputGroupText>\r\n          <InputGroupText>-</InputGroupText>\r\n        </InputGroupAddon>\r\n        <Input\r\n          placeholder=\"Option1\"\r\n          value={options[0]}\r\n          onChange={(e) => setOptionInArray(e.target.value, 0)}\r\n        />\r\n      </InputGroup>\r\n      <InputGroup>\r\n        <InputGroupAddon className=\"input-grp\" addonType=\"append\">\r\n          <InputGroupText>+</InputGroupText>\r\n          <InputGroupText>-</InputGroupText>\r\n        </InputGroupAddon>\r\n        <Input\r\n          placeholder=\"Option2\"\r\n          value={options[1]}\r\n          onChange={(e) => setOptionInArray(e.target.value, 1)}\r\n        />\r\n      </InputGroup>\r\n      <div className=\"question-buttons\">\r\n        <Button\r\n          className=\"survey-qts-btn\"\r\n          onClick={addQuestionClickAction}\r\n          disabled={isNullOrDefined()}\r\n        >\r\n          Add Question\r\n        </Button>\r\n        <Button className=\"survey-qts-btn\" onClick={publishQuestion} disabled={isNullOrDefined()}>\r\n          Publish Question\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleSelect;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useLocation, useHistory } from \"react-router-dom\";\r\nimport {\r\n  Dropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n} from \"reactstrap\";\r\nimport MultiSelect from \"./MultiSelect\";\r\nimport SingleSelect from \"./SingleSelect\";\r\n\r\nconst CreateSurvey = () => {\r\n  const { surveyId } = useParams();\r\n  const history = useHistory();\r\n  const query = useLocation().search;\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const [dropdownText, setDropdownText] = useState(\"Select Question Type\");\r\n\r\n  useEffect(() => {\r\n    if (query === \"?clear=true\") {\r\n      setDropdownText(\"Select Question Type\");\r\n      history.push(\"/create/\"+surveyId);\r\n    }\r\n  }, [query, history, surveyId]);\r\n\r\n  const toggle = () => setDropdownOpen((prevState) => !prevState);\r\n\r\n  return (\r\n    <>\r\n      <p>SurveyId : {surveyId}</p>\r\n      <Dropdown isOpen={dropdownOpen} toggle={toggle}>\r\n        <DropdownToggle caret>{dropdownText}</DropdownToggle>\r\n        <DropdownMenu>\r\n          <DropdownItem\r\n            onClick={() => setDropdownText(\"Multi Select Questions\")}\r\n          >\r\n            Multi Select Questions\r\n          </DropdownItem>\r\n          <DropdownItem\r\n            onClick={() => setDropdownText(\"Single Select Questions\")}\r\n          >\r\n            Single Select Questions\r\n          </DropdownItem>\r\n        </DropdownMenu>\r\n      </Dropdown>\r\n      {dropdownText === \"Multi Select Questions\" ? <MultiSelect /> : null}\r\n      {dropdownText === \"Single Select Questions\" ? <SingleSelect /> : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateSurvey;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Button } from \"reactstrap\";\r\nfunction TakeSurvey() {\r\n  const surveyIds = useSelector((globalStore) =>\r\n    globalStore.surveys.filter((s) => s.isPublished).map((s)=>s.surveyId)\r\n  );\r\n  const styles = {\r\n    margin: \"auto\",\r\n    marginTop: \"20px\",\r\n    marginBottom: \"10px\",\r\n    display: \"block\"\r\n  }\r\n  return (\r\n    <>\r\n      <div>\r\n        <p>\r\n          {surveyIds.map((surveyId) => (\r\n            <Button className=\"survey-main-btn\" key={surveyId} style={styles}>Take Survey {surveyId}</Button>\r\n          ))}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TakeSurvey;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { Button } from \"reactstrap\";\r\nimport { surveySlice } from \"../store/surveySlic\";\r\nfunction ConfirmSurvey() {\r\n  const { surveyId } = useParams();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const surveyData = useSelector((globalStore) =>\r\n    globalStore.surveys.find((s) => s.surveyId === surveyId)\r\n  );\r\n  const confirmAndPublishSurvey = () => {\r\n      const payload = {surveyId};\r\n      dispatch(surveySlice.actions.markPublished(payload));\r\n      history.push(\"/\");  \r\n  };\r\n  return (\r\n    <>\r\n      <div>\r\n        <div>\r\n          {surveyData.questions.map((q) => (\r\n            <div key={surveyId + Math.random()}>\r\n              <h4>{q.question}</h4>\r\n              {q.type === \"single\" ? (\r\n                <div>\r\n                  <label>{q.options[0]}</label>\r\n                  <input type=\"radio\" />\r\n                  <label>{q.options[1]}</label>\r\n                  <input type=\"radio\" />\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <label>{q.options[0]}</label>\r\n                  <input type=\"checkbox\" />\r\n                  <label>{q.options[1]}</label>\r\n                  <input type=\"checkbox\" />\r\n                  <label>{q.options[2]}</label>\r\n                  <input type=\"checkbox\" />\r\n                  <label>{q.options[3]}</label>\r\n                  <input type=\"checkbox\" />\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n          <Button className=\"survey-main-btn\" onClick={confirmAndPublishSurvey}>\r\n            Confirm\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ConfirmSurvey;\r\n","import logo from \"./survey-tiger.PNG\";\nimport \"./App.css\";\nimport { Button } from \"reactstrap\";\nimport { Switch, Route, Link, useHistory } from \"react-router-dom\";\nimport CreateSurvey from \"./components/CreateSurvey\";\nimport TakeSurvey from \"./components/TakeSurvey\";\nimport { useDispatch } from \"react-redux\";\nimport { createSurvey } from \"./store/surveySlic\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport ConfirmSurvey from \"./components/ConfirmSurvey\";\nfunction App() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const redirectToNewSurvey = () => {\n    dispatch(createSurvey()).then(unwrapResult).then(newSurveyId => history.push(\"/create/\"+newSurveyId));\n  }\n  return (\n        <div className=\"App\">\n          <header>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </header>\n          {/* A <Switch> looks through its children <Route>s and\n          renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/create/:surveyId\">\n              <CreateSurvey />\n            </Route>\n            <Route path=\"/take\"><TakeSurvey /></Route>\n            <Route path=\"/confirm/:surveyId\"><ConfirmSurvey /></Route>\n            <Route path=\"/\">\n              <header className=\"App-header\">\n                <Button\n                  className=\"survey-main-btn\"\n                  onClick={redirectToNewSurvey}\n                >\n                  Create Survey\n                </Button>\n                <Link to=\"/take\">\n                  <Button className=\"survey-main-btn\">Take Survey</Button>\n                </Link>\n              </header>\n            </Route>\n          </Switch>\n        </div>    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const responseSlice = createSlice({\r\n    name: \"a\",\r\n    initialState: \"\",\r\n    reducers:{\r\n        print:state => console.log(state)\r\n    }\r\n})","import {combineReducers, configureStore} from '@reduxjs/toolkit';\r\nimport {surveySlice} from \"./surveySlic\";\r\nimport {responseSlice} from \"./responseSlice\";\r\n\r\nconst rootReducer = combineReducers({surveys: surveySlice.reducer, responses: responseSlice.reducer})\r\nexport const store = configureStore({ reducer: rootReducer });","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/global-store\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}